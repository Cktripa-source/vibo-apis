generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  VENDOR
  AFFILIATE
  INFLUENCER
  BUYER
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PayoutStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  email        String   @unique
  phone        String?  @unique
  passwordHash String
  name         String
  role         Role
  isVerified   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations by IDs
  productIds        String[] @db.ObjectId
  affiliateId       String?  @db.ObjectId
  influencerId      String?  @db.ObjectId
  orderIds          String[] @db.ObjectId
  reviewIds         String[] @db.ObjectId
  transactionIds    String[] @db.ObjectId
  vendorCampaignIds String[] @db.ObjectId
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  vendorId    String  @db.ObjectId
  title       String
  description String
  priceCents  Int
  currency    String  @default("RWF")
  stock       Int
  category    String
  imageUrl    String?
  digitalUrl  String?
  isApproved  Boolean @default(false)

  // Affiliate settings
  isAffiliatePromotable Boolean @default(false)
  commissionPercent     Float? // e.g. 10 = 10% commission

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItemIds     String[]        @db.ObjectId
  affiliateLinkIds AffiliateLink[] // <- fixed relation type
  reviewIds        String[]        @db.ObjectId
}

model AffiliateLink {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  code        String   @unique
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id])
  affiliateId String   @db.ObjectId
  clickIds    String[] @db.ObjectId
  createdAt   DateTime @default(now())
}


model Click {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  affiliateLinkId String   @db.ObjectId
  ip              String?
  userAgent       String?
  referer         String?
  createdAt       DateTime @default(now())
  affiliateId     String?  @db.ObjectId
}

model Influencer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @unique @db.ObjectId
  niche       String?
  campaignIds String[] @db.ObjectId
}

model Campaign {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  vendorId      String   @db.ObjectId
  title         String
  description   String
  budgetCents   Int
  status        String   @default("OPEN")
  target        String?
  influencerId  String?  @db.ObjectId
  engagementIds String[] @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Engagement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  campaignId String   @db.ObjectId
  metric     String
  value      Int
  createdAt  DateTime @default(now())
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  buyerId       String      @db.ObjectId
  status        OrderStatus @default(PENDING)
  totalCents    Int
  currency      String      @default("RWF")
  affiliateId   String?     @db.ObjectId
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  itemIds       String[]    @db.ObjectId
  transactionId String?     @db.ObjectId
}

model OrderItem {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String @db.ObjectId
  productId  String @db.ObjectId
  quantity   Int    @default(1)
  priceCents Int
  currency   String @default("RWF")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId
  userId    String   @db.ObjectId
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Transaction {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String       @unique @db.ObjectId
  provider     String
  providerRef  String
  amountCents  Int
  currency     String
  payoutStatus PayoutStatus @default(PENDING)
  createdAt    DateTime     @default(now())
  userId       String?      @db.ObjectId
}
